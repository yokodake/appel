%{
#include <stdio.h>
#include "util.h"
#include "symbol.h"
#include "errormsg.h"
#include "absyn.h"

int yylex(void); /* function prototype */

A_exp absyn_root;

void yyerror(char *s)
{
 EM_error(EM_tokPos, "%s", s);
}
%}


%union {
  int pos;
  int ival;
  string sval;
  A_field field;
  A_fieldList fieldlist;
  /* et cetera */
}

%type <field> tyfield
%type <fieldList> tyfields tyfieldList

%token <sval> ID STRING
%token <ival> INT

%token
  COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK
  LBRACE RBRACE DOT
  PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE
  AND OR ASSIGN
  ARRAY IF THEN ELSE WHILE FOR TO DO LET IN END OF
  BREAK NIL
  FUNCTION VAR TYPE

%right LOWPREC
%nonassoc THEN OF DO TO
%nonassoc ASSIGN
%nonassoc ELSE LBRACK
%left OR
%left AND
%nonassoc EQ NEQ LT LE GT GE
%left PLUS MINUS
%left TIMES DIVIDE
%nonassoc UMINUS

%start program

%%
program : exp

/* QOL */
id : ID   {$$=S_Symbol($1)}

/* declarations */
decs : dec decs
     |

dec : tydec          {$$=A_TypeDec(EM_tokPos, A_NametyList($1, NULL))}
    | vardec         {$$=$1}
    | fundec         {$$=A_FunctionDec(EM_tokPos, A_FundecList($1, NULL))}

/* data types */
tydec : TYPE id EQ ty                    {$$=A_Namety($2, $4)}

ty : id                                  {$$=A_NameTy(EM_tokPos, $1)}
   | LBRACE tyfields RBRACE              {$$=A_RecordTy(EM_tokPos, $2)}
   | ARRAY OF id                         {$$=A_ArrayTy(EM_tokPos, $3)}

tyfields : tyfield tyfieldList           {$$=A_FieldList($1, $2)}
         |                               {$$=NULL}
tyfield : id COLON id                    {$$=A_Field(EM_tokPos, $1, $3)}
tyfieldList : COMMA tyfield tyfieldList  {$$=A_FieldList($2, $3)}
            |                            {$$=NULL}

/* variables */
vardec : VAR id ASSIGN exp
       | VAR id COLON id ASSIGN exp


/* functions */
fundec : FUNCTION id LPAREN tyfields RPAREN EQ exp
       | FUNCTION id LPAREN tyfields RPAREN COLON id EQ exp

/* variables and expression */
lvalue : id              %prec LOWPREC
       | lvalue DOT id
       | lvalue LBRACK exp RBRACK
       | id LBRACK exp RBRACK

/* experessions */

exp : lvalue                            // {$$=$1}
    | NIL                               // {$$=A_NilExp(EM_tokPos)}
    | INT
    | STRING
    | LPAREN RPAREN
    | LPAREN exp seq RPAREN
    | funcall
    /* arithmetic,boolean,etc. */
    | binexp
    /* record creation */
    | reccrea
    /* array creation */
    | id LBRACK exp RBRACK OF exp
    /* assignment */
    | lvalue ASSIGN exp
    | ifexp
    | WHILE exp DO exp
    | FOR id ASSIGN exp TO exp DO exp
    | BREAK
    | LET decs IN expseq END

expseq : exp seq
       |

seq : SEMICOLON exp seq
    |

funcall : id LPAREN exp funargs RPAREN
        | id LPAREN RPAREN

funargs : COMMA exp funargs
        |

binexp : MINUS exp %prec UMINUS
       | exp PLUS exp
       | exp MINUS exp
       | exp TIMES exp
       | exp DIVIDE exp
       | exp EQ exp
       | exp NEQ exp
       | exp GT exp
       | exp LT exp
       | exp LE exp
       | exp GE exp
       | exp AND exp
       | exp OR exp


reccrea : id LBRACE recfield recfields RBRACE
        | id LBRACE RBRACE

recfield : id EQ exp

recfields : COMMA recfield recfields
          |

ifexp : IF exp THEN exp
      | IF exp THEN exp ELSE exp
