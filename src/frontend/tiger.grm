%{
extern "C" {
#include <stdio.h>
#include "util.h"
#include "symbol.h"
#include "errormsg.h"
#include "absyn.h"

extern int yylex(); /* function prototype */

exp_ptr absyn_root;

void yyerror(const char *s) {
 EM_error(EM_tokPos, "%s", s);
}

}%}

%define parse.error verbose

%union {
  int pos;
  int ival;
  string sval;
  struct {string sval; int ssiz; } str;
  Symbol symbol;
  dec_ptr dec;
  efield efield;
  exp_ptr exp;
  tyfiel tyfield;
  tiger::list<dec_ptr> decList;
  tiger::list<efield> efieldList;
  tiger::list<exp_ptr> expList;
  tiger::list<tyfield> tyfieldList
  typ_ptr ty;
  var_ptr var;
}

%type <dec> dec vardec tydec fundec
%type <decList> decs
%type <efield> recfield
%type <efieldList> recfields
%type <exp> exp funcall binexp reccrea ifexp boolexp expseq program
%type <expList> seq funargs
%type <symbol> id
%type <ty> ty
%type <tyfield> tyfield
%type <tyfieldList> tyfields tyfieldList
%type <var> lvalue

%token <ival> INT
%token <str> STRING
%token <sval> ID

%token
  COMMA "," COLON ":" SEMICOLON ";" LPAREN "(" RPAREN ")" LBRACK "[" RBRACK "]"
  LBRACE "{" RBRACE "}" DOT "."
  PLUS "+" MINUS "-" TIMES "*" DIVIDE "/" EQ "=" NEQ "!=" LT "<" LE "<=" GT ">" GE ">="
  AND "&" OR "|" ASSIGN ":="
  ARRAY "array" IF "if" THEN "then" ELSE "else" WHILE "while" FOR "for" TO "to" DO "do" LET "let" IN "in" END "end" OF "of"
  BREAK "break" NIL "nil"
  FUNCTION "function" VAR "var" TYPE "type"

%right LOWPREC
%nonassoc THEN OF DO TO
%nonassoc ASSIGN
%nonassoc ELSE LBRACK
%left OR
%left AND
%nonassoc EQ NEQ LT LE GT GE
%left PLUS MINUS
%left TIMES DIVIDE
%nonassoc UMINUS

%start program

%%
program : exp        {$$=absyn_root = $1;}

/* QOL */
id : ID   {$$=Symbol(String($1));}

/* declarations */
decs : dec decs      {$$=util::cons<dec_ptr>($1, $2);}
     |               {$$=nil<dec_ptr>();}

dec : tydec          {$$=$1;}
    | vardec         {$$=$1;}
    | fundec         {$$=$1;}

/* data types */
tydec : TYPE id EQ ty                    {$$=TypeDec(EM_tokPos, $2, $4);} 

ty : id                                  {$$=NameTy(EM_tokPos, $1);}
   | LBRACE tyfields RBRACE              {$$=RecordTy(EM_tokPos, $2);}
   | ARRAY OF id                         {$$=ArrayTy(EM_tokPos, $3);}

tyfields : tyfield tyfieldList           {$$=tiger::list<TyField>($1, $2);}
         |                               {$$=tiger::list<TyField>();}
tyfield : id COLON id                    {$$=TyField(EM_tokPos, $1, $3);}
tyfieldList : COMMA tyfield tyfieldList  {$$=tiger::list<TyField>($2, $3);}
            |                            {$$=tiger::list<TyField>();}

/* variables */
vardec : VAR id ASSIGN exp               {$$=VarDec(EM_tokPos, $2, $4);}
       | VAR id COLON id EQ exp          {$$=VarDec(EM_tokPos, $2, $4, $6);}


/* functions */
// @TODO rewrite FunDec
fundec : FUNCTION id LPAREN tyfields RPAREN EQ exp
           {$$=FunDec(EM_tokPos, Decl::Fun($2, $4, {}, $7));} 
       | FUNCTION id LPAREN tyfields RPAREN COLON id EQ exp
           {$$=FunDec(EM_tokPos, Decl::Fun($2, $4, $7, $9));}

/* variables and expression */
lvalue : id         %prec LOWPREC       {$$=SimpleVar(EM_tokPos, $1);}
       | lvalue DOT id                  {$$=FieldVar(EM_tokPos, $1, $3);}
       | lvalue LBRACK exp RBRACK       {$$=SubscriptVar(EM_tokPos, $1, $3);}
       | id LBRACK exp RBRACK           {$$=SubscriptVar(EM_tokPos, SimpleVar(EM_tokPos, $1), $3);}

/* experessions */

exp : lvalue                            {$$=VarExp(EM_tokPos, $1);}
    | NIL                               {$$=NilExp(EM_tokPos);}
    | INT                               {$$=IntExp(EM_tokPos, $1);}
    | STRING                            {$$=StringExp(EM_tokPos, String_strip($1.sval, $1.ssiz));}
    | LPAREN RPAREN                     {$$=SeqExp(EM_tokPos);}
    | funcall                           {$$=$1;}
    | binexp                            {$$=$1;}
    | boolexp                           {$$=$1;}
    | reccrea                           {$$=$1;}
    | LPAREN exp seq RPAREN             {$$=SeqExp(EM_tokPos, tiger::list<exp_ptr>($2, $3));}
    | lvalue ASSIGN exp                 {$$=AssignExp(EM_tokPos, $1, $3);}
    | ifexp                             {$$=$1;}
    | WHILE exp DO exp                  {$$=WhileExp(EM_tokPos, $2, $4);}
    | FOR id ASSIGN exp TO exp DO exp   {$$=ForExp(EM_tokPos, $2, $4, $6, $8);}
    | BREAK                             {$$=BreakExp(EM_tokPos);}
    | LET decs IN expseq END            {$$=LetExp(EM_tokPos, $2.to_vec(), $4);}
    | id LBRACK exp RBRACK OF exp       {$$=ArrayExp(EM_tokPos, $1, $3, $6);}

expseq : exp seq                        {$$=SeqExp(EM_tokPos, tiger::list<exp_ptr>($1, $2));}
       |                                {$$=SeqExp(EM_tokPos)}

seq : SEMICOLON exp seq                 {$$=tiger::list<exp_ptr>($2, $3);}
    |                                   {$$=tiger::list<exp_ptr>();}

funcall : id LPAREN exp funargs RPAREN  {$$=CallExp(EM_tokPos, $1, tiger::list<exp_ptr>($3, $4).to_vec());}
        | id LPAREN RPAREN              {$$=CallExp(EM_tokPos, $1, tiger::list<exp_ptr>());}

funargs : COMMA exp funargs             {$$=tiger::list<exp_ptr>($2, $3);}
        |                               {$$=tiger::list<exp_ptr>();}

binexp : MINUS exp %prec UMINUS         {$$=OpExp(EM_tokPos, Exp::op_t::minusOp, A_IntExp(EM_tokPos, 0), $2);}
       | exp PLUS exp                   {$$=OpExp(EM_tokPos, Exp::op_t::plusOp, $1, $3);}
       | exp MINUS exp                  {$$=OpExp(EM_tokPos, Exp::op_t::minusOp, $1, $3);}
       | exp TIMES exp                  {$$=OpExp(EM_tokPos, Exp::op_t::timesOp, $1, $3);}
       | exp DIVIDE exp                 {$$=OpExp(EM_tokPos, Exp::op_t::divideOp, $1, $3);}
       | exp EQ exp                     {$$=OpExp(EM_tokPos, Exp::op_t::eqOp, $1, $3);}
       | exp NEQ exp                    {$$=OpExp(EM_tokPos, Exp::op_t::neqOp, $1, $3);}
       | exp GT exp                     {$$=OpExp(EM_tokPos, Exp::op_t::gtOp, $1, $3);}
       | exp LT exp                     {$$=OpExp(EM_tokPos, Exp::op_t::ltOp, $1, $3);}
       | exp LE exp                     {$$=OpExp(EM_tokPos, Exp::op_t::leOp, $1, $3);}
       | exp GE exp                     {$$=OpExp(EM_tokPos, Exp::op_t::geOp, $1, $3);}

// @TODO real and/or
boolexp : exp AND exp                    {$$=IfExp(EM_tokPos, $1, $3, NumberExp(EM_tokPos, 0));}
        | exp OR exp                     {$$=IfExp(EM_tokPos, $1, NumberExp(EM_tokPos, 1), $3);}


reccrea : id LBRACE recfield recfields RBRACE  {$$=RecordExp(EM_tokPos, $1, tiger::list<efield>($3, $4));}
        | id LBRACE RBRACE                     {$$=RecordExp(EM_tokPos, $1, tiger::list<efield>());}

recfield : id EQ exp                           {$$=EField($1, $3);}

recfields : COMMA recfield recfields           {$$=tiger::list<efield>(2, $3);}
          |                                    {$$=tiger::list<efield>();}

ifexp : IF exp THEN exp                        {$$=IfExp(EM_tokPos, $2, $4);}
      | IF exp THEN exp ELSE exp               {$$=IfExp(EM_tokPos, $2, $4, $6);}
